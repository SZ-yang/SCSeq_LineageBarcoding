# general package
import numpy as np
import pandas as pd

# deep learning package
import torch

from torch.utils.data import Dataset
from torch.multiprocessing import cpu_count
import torchvision.transforms as T




class SCDataset(Dataset):
    """
    A PyTorch Dataset class that wraps around the batches generated by SClineage_DataLoader.
    This class makes the batches generated by SClineage_DataLoader accessible to PyTorch's DataLoader class.
    """
    def __init__(self, batches):
        """
        Initializes the dataset with the batches.

        Args:
            batches (dict): first output of the 
            A dictionary where keys are batch indices and values are the batches (list of tuples of tensors).
        """
        self.batches = batches
        self.all_batches = self._flatten_batches(batches)

    def _flatten_batches(self, batches):
        """
        Flattens the batch dictionary into a list of samples.
        Each sample is a tuple consisting of two tensors.

        Args:
            batches (dict): The batches as generated by SClineage_DataLoader.

        Returns:
            List of tuples: A flattened list where each item is a tuple of tensors.
        """
        flattened = []
        for batch in batches.values():
            for sample in batch:
                flattened.append(sample)
        return flattened

    def __len__(self):
        """
        Returns the total number of samples in the dataset.
        """
        return len(self.all_batches)

    def __getitem__(self, idx):
        """
        Retrieves the nth sample from the dataset.

        Args:
            idx (int): The index of the sample to retrieve.

        Returns:
            tuple: A tuple containing two tensors.
        """
        # Assuming each item in all_batches is a tuple of tensors
        return self.all_batches[idx]




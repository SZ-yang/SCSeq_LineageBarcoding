features = "entropy",
reduction = "python_X_umap",
na_cutoff = 0)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "umap",
na_cutoff = 0)
cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
set.seed(10)
cells_vec <- sample(Seurat::Cells(seurat_obj))
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
entropy_monocyte <- seurat_obj$entropy
entropy_monocyte[seurat_obj$Cell.type.annotation != "Monocyte"] <- NA
seurat_obj$entropy_monocyte <- entropy_monocyte
set.seed(10)
na_idx <- which(is.na(entropy_monocyte))
non_na_idx <- which(!is.na(entropy_monocyte))
ordering <- c(na_idx, sample(non_na_idx))
cells_vec <- Seurat::Cells(seurat_obj)[ordering]
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_monocyte",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_monocyte",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
table(is.na(lineage_entropy))
lineage_names <- sort(unique(seurat_obj$clone_id))
lineage_entropy <- sapply(lineage_names, function(lineage){
idx <- intersect(which(seurat_obj$clone_id == lineage),
which(seurat_obj$Time.point == "t_6"))
if(length(idx) == 0) return(NA)
tab_vec <- table(seurat_obj$Cell.type.annotation[idx])
if("Undifferentiated" %in% names(tab_vec)){
idx <- which(names(tab_vec) == "Undifferentiated")
tab_vec <- tab_vec[-idx]
}
if(sum(tab_vec) <= 2) return(NA)
shannon_entropy(tab_vec)
})
names(lineage_entropy) <- lineage_names
table(is.na(lineage_entropy))
hist(lineage_entropy)
# compute the hypothetical maximum entropy
num_celltypes <- length(unique(seurat_obj$Cell.type.annotation))-1
max_entropy <- shannon_entropy(rep(1/num_celltypes, length = num_celltypes))
stopifnot(all(max_entropy >= max(lineage_entropy, na.rm = TRUE)))
# map the entropy back to the cells
cell_entropy <- lineage_entropy[seurat_obj$clone_id]
names(cell_entropy) <- Seurat::Cells(seurat_obj)
seurat_obj$entropy <- cell_entropy
set.seed(10)
cells_vec <- sample(Seurat::Cells(seurat_obj))
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
lineage_names <- sort(unique(seurat_obj$clone_id))
lineage_entropy <- sapply(lineage_names, function(lineage){
idx <- intersect(which(seurat_obj$clone_id == lineage),
which(seurat_obj$Time.point == "t_6"))
if(length(idx) == 0) return(NA)
tab_vec <- table(seurat_obj$Cell.type.annotation[idx])
if("Undifferentiated" %in% names(tab_vec)){
idx <- which(names(tab_vec) == "Undifferentiated")
tab_vec <- tab_vec[-idx]
}
if(sum(tab_vec) <= 4) return(NA)
shannon_entropy(tab_vec)
})
names(lineage_entropy) <- lineage_names
table(is.na(lineage_entropy))
hist(lineage_entropy)
# compute the hypothetical maximum entropy
num_celltypes <- length(unique(seurat_obj$Cell.type.annotation))-1
max_entropy <- shannon_entropy(rep(1/num_celltypes, length = num_celltypes))
stopifnot(all(max_entropy >= max(lineage_entropy, na.rm = TRUE)))
# map the entropy back to the cells
cell_entropy <- lineage_entropy[seurat_obj$clone_id]
names(cell_entropy) <- Seurat::Cells(seurat_obj)
seurat_obj$entropy <- cell_entropy
set.seed(10)
cells_vec <- sample(Seurat::Cells(seurat_obj))
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
entropy_monocyte <- seurat_obj$entropy
entropy_monocyte[seurat_obj$Cell.type.annotation != "Monocyte"] <- NA
seurat_obj$entropy_monocyte <- entropy_monocyte
set.seed(10)
na_idx <- which(is.na(entropy_monocyte))
non_na_idx <- which(!is.na(entropy_monocyte))
ordering <- c(na_idx, sample(non_na_idx))
cells_vec <- Seurat::Cells(seurat_obj)[ordering]
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_monocyte",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_monocyte",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
?ggplot2::ggsave
ggplot2::ggsave(plot_all, filename = "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_umap_celltype.png",
height = 1200, width = 2000, res = 300, units = "px")
plot1 <- Seurat::DimPlot(seurat_obj,
reduction = "python_X_umap",
group.by = "Cell.type.annotation",
cols = seurat_obj@misc$Cell.type.annotation_colors)
plot1 <- plot1 + Seurat::NoLegend()
plot2 <- Seurat::DimPlot(seurat_obj,
reduction = "umap",
group.by = "Cell.type.annotation",
label = TRUE,
label.size = 2,
cols = seurat_obj@misc$Cell.type.annotation_colors)
plot2 <- plot2 + Seurat::NoLegend()
plot_all <- cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
ggplot2::ggsave(plot_all, filename = "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_umap_celltype.png",
height = 1200, width = 2000, res = 300, units = "px")
ggplot2::ggsave(plot_all, filename = "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_umap_celltype.png",
height = 1200, width = 2000, dpi = 300, units = "px")
unique(seurat_obj$Cell.type.annotation)
png("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_entropy_hist.png",
width = 1500, height = 1200, res = 300, units = "px")
hist(lineage_entropy,
main = "Shannon entropy,\nonly for lineages with more than\n4 non-undiff cells at D6")
graphics.off()
length(!is.na(lineage_entropy))
length(lineage_entropy)
length(which(!is.na(lineage_entropy)))
png("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_entropy_hist.png",
width = 1500, height = 1200, res = 300, units = "px")
hist(lineage_entropy,
xlab = "Shannon entropy (one per lineage)",
main = paste0("Shannon entropy,\nonly for lineages with more than\n4 non-undiff cells at D6\n",
length(which(!is.na(lineage_entropy))), " of ", length(lineage_entropy), " non-NA"))
graphics.off()
rm(list=ls())
library(Seurat)
load("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup3/Writeup3_Larry_scBaseEncoderFeat_Z_bs30_tau05.RData")
plot1 <- Seurat::DimPlot(seurat_obj,
reduction = "python_X_umap",
group.by = "Cell.type.annotation",
cols = seurat_obj@misc$Cell.type.annotation_colors)
plot1 <- plot1 + Seurat::NoLegend()
plot2 <- Seurat::DimPlot(seurat_obj,
reduction = "umap",
group.by = "Cell.type.annotation",
label = TRUE,
label.size = 2,
cols = seurat_obj@misc$Cell.type.annotation_colors)
plot2 <- plot2 + Seurat::NoLegend()
plot_all <- cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
ggplot2::ggsave(plot_all, filename = "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_umap_celltype.png",
height = 1200, width = 2000, dpi = 300, units = "px")
# compute a lineage statistic based on a Shannon entropy
shannon_entropy <- function(vec){
vec <- vec[vec > 0]
vec <- vec/sum(vec)
-sum(vec * log(vec))
}
#################
lineage_names <- sort(unique(seurat_obj$clone_id))
lineage_entropy <- sapply(lineage_names, function(lineage){
idx <- intersect(which(seurat_obj$clone_id == lineage),
which(seurat_obj$Time.point == "t_6"))
if(length(idx) == 0) return(NA)
tab_vec <- table(seurat_obj$Cell.type.annotation[idx])
if("Undifferentiated" %in% names(tab_vec)){
idx <- which(names(tab_vec) == "Undifferentiated")
tab_vec <- tab_vec[-idx]
}
if(sum(tab_vec) <= 4) return(NA)
shannon_entropy(tab_vec)
})
names(lineage_entropy) <- lineage_names
table(is.na(lineage_entropy))
png("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_entropy_hist.png",
width = 1500, height = 1200, res = 300, units = "px")
hist(lineage_entropy,
xlab = "Shannon entropy (one per lineage)",
main = paste0("Shannon entropy,\nonly for lineages with more than\n4 non-undiff cells at D6\n",
length(which(!is.na(lineage_entropy))), " of ", length(lineage_entropy), " non-NA"))
graphics.off()
# compute the hypothetical maximum entropy
num_celltypes <- length(unique(seurat_obj$Cell.type.annotation))-1
max_entropy <- shannon_entropy(rep(1/num_celltypes, length = num_celltypes))
stopifnot(all(max_entropy >= max(lineage_entropy, na.rm = TRUE)))
# map the entropy back to the cells
cell_entropy <- lineage_entropy[seurat_obj$clone_id]
names(cell_entropy) <- Seurat::Cells(seurat_obj)
seurat_obj$entropy <- cell_entropy
set.seed(10)
cells_vec <- sample(Seurat::Cells(seurat_obj))
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot_all <- cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
ggplot2::ggsave(plot_all, filename = "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_umap_entropy.png",
height = 1200, width = 2000, dpi = 300, units = "px")
# only monocytes and their entropy
entropy_monocyte <- seurat_obj$entropy
entropy_monocyte[seurat_obj$Cell.type.annotation != "Monocyte"] <- NA
seurat_obj$entropy_monocyte <- entropy_monocyte
set.seed(10)
na_idx <- which(is.na(entropy_monocyte))
non_na_idx <- which(!is.na(entropy_monocyte))
ordering <- c(na_idx, sample(non_na_idx))
cells_vec <- Seurat::Cells(seurat_obj)[ordering]
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_monocyte",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_monocyte",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot_all <- cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
ggplot2::ggsave(plot_all, filename = "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_umap_entropy-monocyte.png",
height = 1200, width = 2000, dpi = 300, units = "px")
# only neutrophil and their entropy
entropy_neutrophil <- seurat_obj$entropy
entropy_neutrophil[seurat_obj$Cell.type.annotation != "Neutrophil"] <- NA
seurat_obj$entropy_neutrophil <- entropy_neutrophil
set.seed(10)
na_idx <- which(is.na(entropy_neutrophil))
non_na_idx <- which(!is.na(entropy_neutrophil))
ordering <- c(na_idx, sample(non_na_idx))
cells_vec <- Seurat::Cells(seurat_obj)[ordering]
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_neutrophil",
reduction = "python_X_umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot2 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "entropy_neutrophil",
reduction = "umap",
na_cutoff = 0,
order = FALSE,
cells = cells_vec)
plot_all <- cowplot::plot_grid(plotlist = list(plot1, plot2), ncol = 2)
ggplot2::ggsave(plot_all, filename = "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup3/Writeup3_umap_entropy-neutrophil.png",
height = 1200, width = 2000, dpi = 300, units = "px")
library(devtools)
install_github("UPSUTER/GEMLI", subdir="GEMLI_package_v0")
library(GEMLI)
library(GEMLI)
load('GEMLI_example_data_matrix.RData')
# from https://github.com/UPSUTER/GEMLI
library(GEMLI)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup5/"
load(paste0(out_folder, 'GEMLI_example_data_matrix.RData'))
load(paste0(out_folder, 'GEMLI_example_barcode_information.RData'))
GEMLI_items = list()
GEMLI_items[['gene_expression']] = data_matrix
GEMLI_items[['barcodes']] = lineage_dict_bc
GEMLI_items[['gene_expression']][9:14,1:5]
GEMLI_items[['barcodes']][1:5]
GEMLI_items = predict_lineages(GEMLI_items)
GEMLI_items[['prediction']][1:5,15:19]
GEMLI_items = test_lineages(GEMLI_items)
GEMLI_items$testing_results
# from https://github.com/UPSUTER/GEMLI
rm(list=ls())
# library(devtools); devtools::install_github("UPSUTER/GEMLI", subdir="GEMLI_package_v0")
library(GEMLI)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup5/"
load(paste0(out_folder, 'GEMLI_example_data_matrix.RData'))
load(paste0(out_folder, 'GEMLI_example_barcode_information.RData'))
GEMLI_items = list()
GEMLI_items[['gene_expression']] = data_matrix
GEMLI_items[['barcodes']] = lineage_dict_bc
dim(data_matrix)
dim(lineage_dict_bc)
head(lineage_dict_bc)
table(lineage_dict_bc)
GEMLI_items = list()
GEMLI_items[['gene_expression']] = data_matrix
GEMLI_items[['barcodes']] = lineage_dict_bc
GEMLI_items[['gene_expression']][9:14,1:5]
GEMLI_items[['barcodes']][1:5]
GEMLI_items = GEMLI::predict_lineages(GEMLI_items)
GEMLI_items[['prediction']][1:5,15:19]
GEMLI_items = GEMLI::test_lineages(GEMLI_items)
GEMLI_items$testing_results
GEMLI_items = GEMLI::test_lineages(GEMLI_items, plot_results=T)
names(GEMLI::)
names(GEMLI_items)
GEMLI::visualize_as_network(GEMLI_items, cutoff=90) # top image
library(igraph)
GEMLI::visualize_as_network(GEMLI_items, cutoff=90) # top image
GEMLI::visualize_as_network(GEMLI_items, cutoff=50) # lower image
GEMLI::visualize_as_network(GEMLI_items, cutoff=90, ground_truth=T, highlight_FPs=T) # top image
GEMLI::visualize_as_network(GEMLI_items, cutoff=50, ground_truth=T, highlight_FPs=T) # lower image
GEMLI_items = GEMLI::prediction_to_lineage_information(GEMLI_items, cutoff=50)
GEMLI_items$predicted_lineage_table[1:5,]
GEMLI_items$predicted_lineages[1:5]
dim(GEMLI_items$predicted_lineage_table)
table(GEMLI_items$predicted_lineages)
length(unique(lineage_dict_bc))
head(GEMLI_items$predicted_lineage_table)
unique(GEMLI_items$predicted_lineage_table[,"clone.ID"])
GEMLI::suggest_network_trimming_to_size(GEMLI_items, max_size=2, cutoff=50) # left image
GEMLI_items_post_processed = GEMLI::trim_network_to_size(GEMLI_items, max_size=2, cutoff=50)
GEMLI::visualize_as_network(GEMLI_items_post_processed, cutoff=50) # right image
load(paste0(out_folder, 'GEMLI_crypts_example_data_matrix.RData'))
load(paste0(out_folder, 'GEMLI_crypts_example_barcode_information.RData'))
GEMLI_items_crypts = list()
GEMLI_items_crypts[['prediction']] = Crypts
GEMLI_items_crypts[['barcodes']] = Crypts_bc_dict
GEMLI::visualize_as_network(GEMLI_items_crypts, cutoff=70, display_orphan=F, max_edge_width=1, ground_truth=T, include_labels=F, layout_style="fr") # first image
GEMLI::visualize_as_network(GEMLI_items_crypts, cutoff=70, display_orphan=F, max_edge_width=1, ground_truth=T, include_labels=F, layout_style="kk") # second image
GEMLI::visualize_as_network(GEMLI_items_crypts, cutoff=70, display_orphan=F, max_edge_width=1, ground_truth=T, include_labels=F, layout_style="grid") # third image
load(paste0(out_folder, 'GEMLI_crypts_example_cell_type_annotation.RData'))
GEMLI::GEMLI_items_crypts[['cell_type']] = Crypts_annotation
GEMLI_items_crypts[['cell_type']] = Crypts_annotation
GEMLI::visualize_as_network(GEMLI_items_crypts, cutoff=70, max_edge_width=5, display_orphan=F, include_labels=F, ground_truth=T, highlight_FPs=T, layout_style="kk", cell_type_colors=T)
cell.type <- unique(GEMLI_items_crypts[['cell_type']]$cell.type)
color <- c("#5386BD", "skyblue1", "darkgreen", "gold", "red", "darkred", "black")
Cell_type_color <- data.frame(cell.type, color)
GEMLI_items_crypts[['cell_type_color']] = Cell_type_color
GEMLI::visualize_as_network(GEMLI_items_crypts, cutoff=70, max_edge_width=5, display_orphan=F, include_labels=F, ground_truth=T, highlight_FPs=T, layout_style="kk", cell_type_colors=T)
GEMLI_items_crypts = GEMLI::prediction_to_lineage_information(GEMLI_items_crypts, cutoff=50)
GEMLI::cell_type_composition_plot(GEMLI_items_crypts, cell_type_colors=T, type=c("bubble"))
library(tidyverse)
GEMLI::cell_type_composition_plot(GEMLI_items_crypts, cell_type_colors=T, type=c("bubble"))
GEMLI::cell_type_composition_plot(GEMLI_items_crypts, ground_truth=F, cell_type_colors=T, type=c("upsetR"))
install.packages("upsetR")
install.packages("UpsetR")
install.packages("UpSetR")
library(UpSetR)
GEMLI::cell_type_composition_plot(GEMLI_items_crypts, ground_truth=F, cell_type_colors=T, type=c("upsetR"))
GEMLI::cell_type_composition_plot(GEMLI_items_crypts, ground_truth=F, cell_type_colors=T, type=c("plain"))
library(tidyverse)
GEMLI::cell_type_composition_plot(GEMLI_items_crypts, ground_truth=F, cell_type_colors=T, type=c("plain"))
Crypts_bc_dict
length(Crypts_bc_dict)
Crypts
dim(Crypts)
length(Crypts_bc_dict)
load(paste0(out_folder, 'GEMLI_cancer_example_norm_count.RData'))
load(paste0(out_folder, 'GEMLI_cancer_example_predicted_lineages.RData'))
load(paste0(out_folder, 'GEMLI_cancer_example_cell_type_annotation.RData'))
GEMLI_items = list()
GEMLI_items[['gene_expression']] = Cancer_norm_count
GEMLI_items[['predicted_lineage_table']] = Cancer_predicted_lineages
GEMLI_items[['cell_type']] = Cancer_annotation
GEMLI::cell_type_composition_plot(GEMLI_items, type=c("plain"))
GEMLI::cell_type_composition_plot(GEMLI_items, type=c("upsetR"))
GEMLI_items <- GEMLI::extract_cell_fate_lineages(GEMLI_items, selection=c("inv_tumor", "DCIS"), unique=FALSE, threshold=c(10,10))
GEMLI_items[['cell_fate_analysis']][1:10,]
table(GEMLI_items[['cell_fate_analysis']]$cell.fate)
GEMLI_items <- GEMLI::cell_fate_DEG_calling(GEMLI_items, ident1="sym_DCIS", ident2="asym_DCIS", min.pct=0.05, logfc.threshold=0.1)
library(Seurat)
GEMLI_items <- GEMLI::cell_fate_DEG_calling(GEMLI_items, ident1="sym_DCIS", ident2="asym_DCIS", min.pct=0.05, logfc.threshold=0.1)
library(Matrix)
GEMLI_items <- GEMLI::cell_fate_DEG_calling(GEMLI_items, ident1="sym_DCIS", ident2="asym_DCIS", min.pct=0.05, logfc.threshold=0.1)
dim(Cancer_norm_count)
Cancer_norm_count[1:5,1:5]
GEMLI_items[['gene_expression']] = Matrix::Matrix(Cancer_norm_count, sparse=TRUE)
GEMLI_items <- GEMLI::cell_fate_DEG_calling(GEMLI_items, ident1="sym_DCIS", ident2="asym_DCIS", min.pct=0.05, logfc.threshold=0.1)
GEMLI_items[['cell_fate_analysis']]$cell.fate
table(GEMLI_items[['cell_fate_analysis']]$cell.fate)
head(GEMLI_items[['cell_fate_analysis']])
Cancer_norm_count[1:5,1:5]
GEMLI_Seurat <- CreateSeuratObject(GEMLI_items[['gene_expression']], project = "SeuratProject", assay = "RNA")
GEMLI_Seurat
dim(Cancer_norm_count)
Metadata <- GEMLI_items[['cell_fate_analysis']]; Metadata$ident<-NA
Metadata$ident[Metadata$cell.fate %in% ident1]<-"ident1"
ident1="sym_DCIS"
ident2="asym_DCIS"
Metadata$ident[Metadata$cell.fate %in% ident1]<-"ident1"
Metadata$ident[Metadata$cell.fate %in% ident2]<-"ident2"
head(Metadata)
Metadata
Meta <- as.data.frame(Metadata[,c(5)])
rownames(Meta) <- Metadata$cell.ID; colnames(Meta)<-c("cell.fate")
head(Meta)
rownames(Meta) <- Metadata$cell.ID; colnames(Meta)<-c("cell.fate")
GEMLI_Seurat <- AddMetaData(GEMLI_Seurat, Meta, col.name = NULL)
DefaultAssay(object = GEMLI_Seurat) <- "RNA"
Idents(GEMLI_Seurat) <- GEMLI_Seurat$cell.fate
GEMLI_Seurat
head(GEMLI_Seurat@meta.data)
DEG <- FindMarkers(object = GEMLI_Seurat, ident.1 = "ident1", ident.2 = "ident2")
GEMLI_Seurat <- CreateSeuratObject(GEMLI_items[['gene_expression']], project = "SeuratProject", assay = "RNA")
Metadata <- GEMLI_items[['cell_fate_analysis']];
Metadata$ident <- "blank"
ident1="sym_DCIS"
ident2="asym_DCIS"
Metadata$ident[Metadata$cell.fate %in% ident1]<-"ident1"
Metadata$ident[Metadata$cell.fate %in% ident2]<-"ident2"
Meta <- as.data.frame(Metadata[,c(5)])
rownames(Meta) <- Metadata$cell.ID; colnames(Meta)<-c("cell.fate")
GEMLI_Seurat <- AddMetaData(GEMLI_Seurat, Meta, col.name = NULL)
DefaultAssay(object = GEMLI_Seurat) <- "RNA"
Idents(GEMLI_Seurat) <- GEMLI_Seurat$cell.fate
DEG <- FindMarkers(object = GEMLI_Seurat, ident.1 = "ident1", ident.2 = "ident2")
table(GEMLI_Seurat$cell.fate)
SeuratObject::LayerData(GEMLI_Seurat, assay = "RNA", layer = "counts")
library(Seurat)
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
library(Seurat)
library(SeuratData)
library(ggplot2)
ifnb <- LoadData("ifnb")
ifnb <- SeuratData::LoadData("ifnb")
SeuratData::LoadData
?SeuratData::LoadData
SeuratData::AvailableData()
ifnb <- SeuratData::InstallData("ifnb")
SeuratData::InstallData("ifnb")
SeuratData::InstallData("cbmc")
cbmc <- SeuratData::LoadData("cbmc")
# Normalize the data
cbmc <- NormalizeData(cbmc)
cbmc
head(cbmc@meta.data)
table(cbmc$rna_annotations)
# Find DE features between CD16 Mono and CD1 Mono
Idents(cbmc) <- "rna_annotations"
# Find DE features between CD16 Mono and CD1 Mono
Idents(cbmc) <- "rna_annotations"
monocyte.de.markers <- FindMarkers(cbmc,
ident.1 = "Memory CD4 T",
ident.2 = "CD14+ Mono")
GEMLI_Seurat
SeuratObject::LayerData(GEMLI_Seurat,
layer = "data",
assay = "RNA") <- SeuratObject::LayerData(GEMLI_Seurat,
layer = "counts",
assay = "RNA")
DEG <- FindMarkers(object = GEMLI_Seurat,
ident.1 = "ident1",
ident.2 = "ident2",
min.pct=0.05,
logfc.threshold=0.1)
# check
mat <- SeuratObject::LayerData(seurat_obj,
layer = "counts",
assay = "RNA")
seurat_obj <- Seurat::RunUMAP(seurat_obj,
reduction = "LCL",
dims = 1:64)
?Seurat::DimPlot
?cutree
?stats::as.dist
rm(list=ls())
library(Seurat)
library(GEMLI)
out_folder <- "~/kzlinlab/projects/scContrastiveLearn/out/kevin/Writeup5/"
load(paste0(out_folder, "Larry_41093_2000_norm_log_cleaned.RData"))
?ggplot2::ggsave

plot1
head(df)
plot1 <- ggplot() +
# 1) Vertical line connecting the three points for each gene
geom_segment(
data = df_segments,
aes(
x     = index,
xend  = index,
y     = ymin,
yend  = ymax
),
color = "gray50"
) +
# 2) The points themselves (colored by which column they came from)
geom_point(
data = df,
aes(
x     = index,
y     = Freq,
color = Var2,
size  = ifelse(Var2 %in% c("cis", "cocl2", "dabtram"), 4, 2)  # Larger size for "cis"
)
) +
# Optional: set your own colors here
scale_color_manual(values = color_vec) +
scale_size_identity() +  # Ensures the manual size values are used directly
# Style the axes, etc.
labs(
x = "Lineage (in sorted order)",
y = "Number of cells (Log10 scale)"
) +
theme_bw(base_size = 14)
plot1 <- plot1 + Seurat::NoLegend()
plot1
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
treatment_vec <- c("cis", "cocl2", "dabtram")
for(treatment in treatment_vec){
col_idx <- grep(paste0("^", treatment), colnames(tab_mat))
tab_mat2 <- tab_mat[,col_idx]
tab_mat2 <- tab_mat2[order(tab_mat2[,treatment], decreasing = TRUE),]
tab_mat2 <- log10(tab_mat2+1)
tab_mat2 <- tab_mat2[1:20,]
df <- as.data.frame(tab_mat2)
# Create an index for the x-axis, and keep gene names
df$index  <- rep(seq_len(nrow(tab_mat2)), times = ncol(tab_mat2))
# We also need a min and max per gene (per index) to make the vertical line
df_segments <- df %>%
group_by(index) %>%
summarize(ymin = min(Freq), ymax = max(Freq), .groups = "drop")
plot1 <- ggplot() +
# 1) Vertical line connecting the three points for each gene
geom_segment(
data = df_segments,
aes(
x     = index,
xend  = index,
y     = ymin,
yend  = ymax
),
color = "gray50"
) +
# 2) The points themselves (colored by which column they came from)
geom_point(
data = df,
aes(
x     = index,
y     = Freq,
color = Var2,
size  = ifelse(Var2 %in% c("cis", "cocl2", "dabtram"), 4, 2)  # Larger size for "cis"
)
) +
# Optional: set your own colors here
scale_color_manual(values = color_vec) +
scale_size_identity() +  # Ensures the manual size values are used directly
# Style the axes, etc.
labs(
x = "Lineage (in sorted order)",
y = "Number of cells (Log10 scale)"
) +
theme_bw(base_size = 14)
plot1 <- plot1 + Seurat::NoLegend()
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lineage-size_barplot_", treatment, ".png"),
height = 6, width = 10)
}
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
treatment_vec <- c("cis", "cocl2", "dabtram")
for(treatment in treatment_vec){
col_idx <- grep(paste0("^", treatment), colnames(tab_mat))
tab_mat2 <- tab_mat[,col_idx]
tab_mat2 <- tab_mat2[order(tab_mat2[,treatment], decreasing = TRUE),]
tab_mat2 <- log10(tab_mat2+1)
tab_mat2 <- tab_mat2[1:20,]
df <- as.data.frame(tab_mat2)
# Create an index for the x-axis, and keep gene names
df$index  <- rep(seq_len(nrow(tab_mat2)), times = ncol(tab_mat2))
# We also need a min and max per gene (per index) to make the vertical line
df_segments <- df %>%
group_by(index) %>%
summarize(ymin = min(Freq), ymax = max(Freq), .groups = "drop")
plot1 <- ggplot() +
# 1) Vertical line connecting the three points for each gene
geom_segment(
data = df_segments,
aes(
x     = index,
xend  = index,
y     = ymin,
yend  = ymax
),
color = "gray50"
) +
# 2) The points themselves (colored by which column they came from)
geom_point(
data = df,
aes(
x     = index,
y     = Freq,
color = Var2,
size  = ifelse(Var2 %in% c("cis", "cocl2", "dabtram"), 4, 2)  # Larger size for "cis"
)
) +
# Optional: set your own colors here
scale_color_manual(values = color_vec) +
scale_size_identity() +  # Ensures the manual size values are used directly
# Style the axes, etc.
labs(
x = "Lineage (in sorted order)",
y = "Number of cells (Log10 scale)"
) +
theme_bw(base_size = 14)
plot1 <- plot1 + Seurat::NoLegend()
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lineage-size_barplot_", treatment, ".png"),
height = 4, width = 4)
}
head(tab_mat)
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
# normalize
for(i in 1:nrow(tab_mat)){
tab_mat[i,] <- tab_mat[i,]/sum(tab_mat[i,])
}
head(tab_mat)
dim(tab_mat)
n <- nrow(tab_mat)
cor_mat <- matrix(NA, n, n)
head(tab_mat)
n <- nrow(tab_mat)
cor_mat <- matrix(NA, n, n)
for(i in 1:(n-1)){
if(i %% floor(n/10) == 0) cat('*')
idx1 <- which(tab_mat[i,] == 0)
for(j in (i+1):n){
idx2 <- which(tab_mat[j,] == 0)
if(length(idx1) == length(idx2) && all(idx1 %in% idx2)){
tmp <- stats::cor(tab_mat[i,], tab_mat[j,])
cor_mat[i,j] <- tmp
cor_mat[j,i] <- tmp
}
}
}
cor_mat
cor_mat[1:10,1:10]
table(is.na(cor_mat))
table(!is.na(cor_mat))
quantile(cor_mat[!is.na(cor_mat)])
idx <- which(cor_mat == 1, arr.ind = TRUE)
head(idx)
cor_mat[39,8]
vec <- c(8,39,269,322,464)
cor_mat[vec, vec]
tab_mat[vec,]
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
quantile(rowsum_vec)
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
tab_mat2 <- tab_mat
# normalize
for(i in 1:nrow(tab_mat2)){
tab_mat2[i,] <- tab_mat2[i,]/sum(tab_mat2[i,])
}
n <- nrow(tab_mat2)
cor_mat <- matrix(NA, n, n)
for(i in 1:(n-1)){
if(i %% floor(n/10) == 0) cat('*')
idx1 <- which(tab_mat2[i,] == 0)
for(j in (i+1):n){
idx2 <- which(tab_mat2[j,] == 0)
if(length(idx1) == length(idx2) & all(idx1 %in% idx2) & length(idx1) > 1){
tmp <- stats::cor(tab_mat2[i,], tab_mat2[j,])
cor_mat[i,j] <- tmp
cor_mat[j,i] <- tmp
}
}
}
table(!is.na(cor_mat))
quantile(cor_mat[!is.na(cor_mat)])
idx <- which(cor_mat == 1, arr.ind = TRUE)
head(idx)
vec <- c(8,39,269,322,464)
cor_mat[vec, vec]
tab_mat[vec,]
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
tab_mat2 <- tab_mat
# normalize
for(i in 1:nrow(tab_mat2)){
tab_mat2[i,] <- tab_mat2[i,]/sum(tab_mat2[i,])
}
n <- nrow(tab_mat2)
cor_mat <- matrix(NA, n, n)
for(i in 1:(n-1)){
if(i %% floor(n/10) == 0) cat('*')
idx1 <- which(tab_mat2[i,] != 0)
for(j in (i+1):n){
idx2 <- which(tab_mat2[j,] != 0)
if(length(idx1) == length(idx2) & all(idx1 %in% idx2) & length(idx1) > 1){
tmp <- stats::cor(tab_mat2[i,], tab_mat2[j,])
cor_mat[i,j] <- tmp
cor_mat[j,i] <- tmp
}
}
}
table(!is.na(cor_mat))
quantile(cor_mat[!is.na(cor_mat)])
idx <- which(cor_mat == 1, arr.ind = TRUE)
head(idx)
idx <- which(cor_mat >= 0.9, arr.ind = TRUE)
head(idx)
idx <- which(cor_mat == 1, arr.ind = TRUE)
idx
vec <- c(28,305,487,550)
cor_mat[vec, vec]
tab_mat[vec,]
tab_mat2[vec,]
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
idx
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
seurat_obj$Lineage <- factor(paste0("Lineage:", seurat_obj$Lineage))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
tab_mat2 <- tab_mat
# normalize
for(i in 1:nrow(tab_mat2)){
tab_mat2[i,] <- tab_mat2[i,]/sum(tab_mat2[i,])
}
n <- nrow(tab_mat2)
cor_mat <- matrix(NA, n, n)
for(i in 1:(n-1)){
if(i %% floor(n/10) == 0) cat('*')
idx1 <- which(tab_mat2[i,] != 0)
for(j in (i+1):n){
idx2 <- which(tab_mat2[j,] != 0)
if(length(idx1) == length(idx2) & all(idx1 %in% idx2) & length(idx1) > 1){
tmp <- stats::cor(tab_mat2[i,], tab_mat2[j,])
cor_mat[i,j] <- tmp
cor_mat[j,i] <- tmp
}
}
}
table(!is.na(cor_mat))
quantile(cor_mat[!is.na(cor_mat)])
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
colnames(cor_mat) <- rownames(tab_mat)
rownames(cor_mat) <- rownames(tab_mat)
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
unique_lineage_idx <- unique(as.numeric(idx))
unique_lineage_idx
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
unique_lineage_idx <- unique(as.numeric(idx))
quantile(rowsum_vec[unique_lineage_idx])
largest_lineage_idx <- unique_lineage_idx[which.max(rowsum_vec[unique_lineage_idx])]
largest_lineage_idx
rowsum_vec[323]
# zoom in on this lineage
parter_lineage_idx <- which(cor_mat[largest_lineage_idx,] >= 0.9)
parter_lineage_idx
rowsum_vec[largest_lineage_idx]
rowsum_vec[parter_lineage_idx]
vec <- c(largest_lineage_idx,parter_lineage_idx]
vec <- c(largest_lineage_idx,parter_lineage_idx]
rowsum_vec[largest_lineage_idx]
# zoom in on this lineage
parter_lineage_idx <- which(cor_mat[largest_lineage_idx,] >= 0.9)
rowsum_vec[parter_lineage_idx]
vec <- c(largest_lineage_idx,parter_lineage_idx)
cor_mat[vec, vec]
tab_mat[vec,]
tab_mat2[vec,]
tab_mat[vec,]
lineage_names <- rownames(cor_mat)[lineage_idx]
lineage_idx <- c(largest_lineage_idx, parter_lineage_idx)
cor_mat[lineage_idx, lineage_idx]
tab_mat[lineage_idx,]
tab_mat2[lineage_idx,]
lineage_names <- rownames(cor_mat)[lineage_idx]
lineage_names
set.seed(10)
seurat_obj <- Seurat::FindNeighbors(seurat_obj,
reduction = "lcl",
dims = 1:64)
seurat_obj <- Seurat::FindClusters(seurat_obj,
resolution = 0.1)
seurat_obj$RNA_snn_res.0.1 <- factor(paste0("Cluster:", seurat_obj$RNA_snn_res.0.1))
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
cell_idx
tab_vec <- table(seurat_obj$RNA_snn_res.0.1[cell_idx])
tab_vec
table(table(tab_vec))
tab_vec[tab_vec != 0]
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_vec <- table(
seurat_obj$Lineage[cell_idx],
seurat_obj$RNA_snn_res.0.1[cell_idx]
)
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
seurat_obj$Lineage[cell_idx],
seurat_obj$RNA_snn_res.0.1[cell_idx]
)
tab_mat_special
tab_mat_special <- tab_mat_special[,colSums(tab_mat_special) != 0]
tab_mat_special
tab_mat_special
colSums(tab_mat_special)
tab_mat_special
tab_mat_special[1,]
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
seurat_obj$Lineage[cell_idx],
seurat_obj$RNA_snn_res.0.1[cell_idx]
)
tab_mat_special[1,]
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
seurat_obj$Lineage[cell_idx],
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
dim(tab_mat_special)
tab_mat_special
tab_mat_special[1,]
tab_mat_special[1:5,1:5]
zz = which(seurat_obj$Lineage=="Lineage:0")
zz
seurat_obj$RNA_snn_res.0.1[zz]
lineage_names
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
tab_mat_special <- table(
droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
tab_mat_special
# how many lienages are in each island?
cluster_names <- levels(seurat_obj$RNA_snn_res.0.1)
num_lineages_per_cluster <- sapply(cluster_names, function(cluster){
tmp_idx <- which(seurat_obj$RNA_snn_res.0.1 == cluster)
length(unique(seurat_obj$Lineage[tmp_idx]))
})
names(num_lineages_per_cluster) <- cluster_names
num_lineages_per_cluster[unique(seurat_obj$RNA_snn_res.0.1[cell_idx])]
tab_mat_special <- table(
droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
tab_mat_special
hist(num_lineages_per_cluster)
rm(list=ls())
library(Seurat)
library(ggplot2)
library(ggrepel)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
set.seed(10)
seurat_obj <- Seurat::FindNeighbors(seurat_obj,
reduction = "lcl",
dims = 1:64)
seurat_obj <- Seurat::FindClusters(seurat_obj,
resolution = 0.1)
seurat_obj$Lineage <- factor(paste0("Lineage:", seurat_obj$Lineage))
seurat_obj$RNA_snn_res.0.1 <- factor(paste0("Cluster:", seurat_obj$RNA_snn_res.0.1))
seurat_obj <- Seurat::RunUMAP(seurat_obj,
reduction = 'lcl',
dims = 1:64,
assay = 'RNA',
reduction.name = 'lcl.umap',
reduction.key = 'lclUMAP_')
color_vec <- c("cis" = rgb(202,111,55, maxColorValue = 255),
"cistocis" = rgb(248,210,152, maxColorValue = 255),
"cistococl2" = rgb(240,148,71, maxColorValue = 255),
"cistodabtram" = rgb(160,61,38, maxColorValue = 255),
"cocl2" = rgb(69,132,69, maxColorValue = 255),
"cocl2tocis" = rgb(131,202,163, maxColorValue = 255),
"cocl2tococl2" = rgb(126,191,90, maxColorValue = 255),
"cocl2todabtram" = rgb(35,63,58, maxColorValue = 255),
"dabtram" = rgb(68,49,147, maxColorValue = 255),
"dabtramtocis" = rgb(147,137,193, maxColorValue = 255),
"dabtramtococl2" = rgb(145,54,147, maxColorValue = 255),
"dabtramtodabtram" = rgb(68,32,85, maxColorValue = 255))
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_OG_condition.png"),
height = 5, width = 5)
plot1 <- scCustomize::DimPlot_scCustom(seurat_obj,
reduction = "lcl.umap",
group.by = "OG_condition",
colors_use = color_vec)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_OG_condition.png"),
height = 5, width = 5)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_OG_condition.png"),
height = 5, width = 8)
plot1 <- scCustomize::DimPlot_scCustom(seurat_obj,
reduction = "lcl.umap",
group.by = "RNA_snn_res.0.1")
plot1 <- plot1 + Seurat::NoLegend()
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_RNA_snn_res.0.1.png"),
height = 5, width = 8)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_RNA_snn_res.0.1.png"),
height = 5, width = 5)
tab_mat <- table(seurat_obj$Lineage, seurat_obj$RNA_snn_res.0.1)
rowsum_vec <- rowSums(tab_mat)
tab_mat <- tab_mat[order(rowsum_vec, decreasing = TRUE),]
colsum_vec <- colSums(tab_mat)
tab_mat <- tab_mat[,order(colsum_vec, decreasing = TRUE)]
rowsum_vec <- rowSums(tab_mat)
colsum_vec <- colSums(tab_mat)
num_lineages_per_cluster <- apply(tab_mat, 2, function(x){length(which(x!=0))})
df <- data.frame(
cluster = colnames(tab_mat),
num_cells = colsum_vec,
num_lineages = num_lineages_per_cluster
)
threshold_cells <- 400
threshold_lineage <- 10
# Example scatter plot
plot1 <- ggplot(df, aes(x = num_lineages, y = num_cells,label = cluster)) +
geom_point(size = 3, alpha = 0.7) +  # Scatter points
geom_text_repel(data = df[df$num_cells > threshold_cells | df$num_lineages > threshold_lineage, ], # Adjust threshold
aes(label = cluster, color = "red"),
box.padding = 0.5,
point.padding = 0.3) +  # Prevent label overlapping
labs(x = "Number of Lineages", y = "Number of Cells", title = "Cluster Scatter Plot") +
Seurat::NoLegend()
plot1
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lineage-by-cells_per-lcl-cluster.png"),
height = 5, width = 5)

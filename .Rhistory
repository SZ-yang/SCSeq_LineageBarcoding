point.padding = 0.3) +  # Prevent label overlapping
labs(x = "Number of Lineages", y = "Number of Cells", title = "Cluster Scatter Plot") +
Seurat::NoLegend()
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lineage-by-cells_per-lcl-finecluster.png"),
height = 4, width = 4)
# zoom in
# finecluster <- df$cluster[which.max(df$num_lineages)]
finecluster <- "LCL:288"
lineages <- rownames(tab_mat)[which(tab_mat[,finecluster]!=0)]
cell_idx <- which(seurat_obj$Lineage %in% lineages)
tab_mat_small <- table(droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$OG_condition[cell_idx]))
tab_mat_small
# zoom in
# finecluster <- df$cluster[which.max(df$num_lineages)]
finecluster <- "LCL:285"
lineages <- rownames(tab_mat)[which(tab_mat[,finecluster]!=0)]
cell_idx <- which(seurat_obj$Lineage %in% lineages)
tab_mat_small <- table(droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$OG_condition[cell_idx]))
tab_mat_small
lineages
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
other_vec <- c("cistocis", "cocl2", "cocl2tocis",
"cocl2tococl2", "cocl2todabtram", "dabtram",
"dabtramtocis", "dabtramtococl2", "dabtramtodabtram")
bool_idx <- which(apply(tab_mat, 1, function(x){
bool1 <- all(x[other_vec] == 0)
bool2 <- x["cis"] > 1
bool3 <- x["cistococl2"] > 2*x["cis"]
bool4 <- x["cistodabtram"] > 0
all(c(bool1, bool2, bool3, bool4))
}))
bool_idx
lineages
color_vec <- c(main = rgb(194, 155, 70, maxColorValue = 255),
secondary = "black",
other = "gray")
embedding <- seurat_obj[["lcl.umap"]]@cell.embeddings
lineage_vec <- seurat_obj$Lineage
lineage_vec <- as.character(lineage_vec)
lineage_vec[!lineage_vec %in% names(bool_idx)] <- "other"
lineage_vec[lineage_vec %in% names(bool_idx)] <- "secondary"
lineage_vec[lineage_vec %in% lineages] <- "main"
table(lineage_vec)
lineages
_obj$Lineage)
lineage_vec <- as.character(seurat_obj$Lineage)
lineage_tmp <- lineage_vec
lineage_tmp[!lineage_vec %in% names(bool_idx)] <- "other"
lineage_tmp[lineage_vec %in% names(bool_idx)] <- "secondary"
lineage_tmp[lineage_vec %in% lineages] <- "main"
table(lineage_tmp)
ggplot2::ggsave(plot1,
file = paste0(plot_folder, "Writeup7_lcl_super-cluster_", finecluster, "_by-OG_condition.png"),
height = 2, width = 5)
# Create the bar plot
plot1 <- ggplot(df_long, aes(x = Treatment, y = Count, fill = Lineage)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sequential treatment", y = "Number of surviving cells in lineage") +
theme_minimal() +
scale_fill_manual(values = c("#1b9e77", "#d95f02"))  # Custom colors
ggplot2::ggsave(plot1,
file = paste0(plot_folder, "Writeup7_lcl_super-cluster_", finecluster, "_by-OG_condition.png"),
height = 2, width = 5)
# Load necessary library
library(ggplot2)
library(reshape2)
# Reshape the data to long format for ggplot2
df_long <- melt(tab_mat_small,
id.vars = "Lineage",
variable.name = "Treatment",
value.name = "Count")
colnames(df_long) <- c("Lineage", "Treatment", "Count")
# Create the bar plot
plot1 <- ggplot(df_long, aes(x = Treatment, y = Count, fill = Lineage)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sequential treatment", y = "Number of surviving cells in lineage") +
theme_minimal() +
scale_fill_manual(values = c("#1b9e77", "#d95f02"))  # Custom colors
ggplot2::ggsave(plot1,
file = paste0(plot_folder, "Writeup7_lcl_super-cluster_", finecluster, "_by-OG_condition.png"),
height = 2, width = 5)
ggplot2::ggsave(plot1,
file = paste0(plot_folder, "Writeup7_lcl_super-cluster_", finecluster, "_by-OG_condition.png"),
height = 2.5, width = 5)
df <- cbind(data.frame(embedding),
factor(lineage_tmp))
colnames(df) <- c("x", "y", "lineage")
# shuffle indicies
cell_idx <- which(df$lineage == "other")
df <- df[c(cell_idx, setdiff(1:nrow(df), cell_idx)),]
plot1 <- ggplot2::ggplot(data = df, ggplot2::aes(x = x, y = y, ))
plot1 <- plot1 + ggplot2::geom_point(ggplot2::aes(
color = lineage,
size  = ifelse(lineage != "other", 2, 1)
))
plot1 <- plot1 + ggplot2::scale_colour_manual(values = color_vec)
plot1 <- plot1 + ggplot2::scale_size_identity()
plot1 <- plot1 + cowplot::theme_cowplot()
plot1 <- plot1 + ggplot2::labs(x = "", y = "")
plot1 <- plot1 + Seurat::NoLegend()
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_super-cluster_", finecluster, "_UMAP.png"),
height = 5, width = 5)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_super-cluster_", finecluster, "_UMAP.png"),
height = 3, width = 5)
rm(list=ls())
library(Seurat)
library(ggplot2)
library(ggrepel)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
rm(list=ls())
library(Seurat)
library(ggplot2)
library(ggrepel)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
source("kevin/Writeup7_dylan/welch_anova.R")
load(paste0(out_folder, "adata_with_lcl.RData"))
dat <- SeuratObject::LayerData(
seurat_obj,
layer = "data",
assay = "RNA"
)
gene_mat <- sapply(1:nrow(dat), function(i){
if(i %% floor(nrow(dat)/10) == 0) cat('*')
x <- as.numeric(dat[i,])
y <- droplevels(seurat_obj$RNA_snn_res.0.01)
df <- data.frame(response_col = x,
group_col = y)
df <- remove_zero_variance(data = df,
response_col = "response_col",
group_col = "group_col")
res <- tryCatch({welch_anova(data = df,
response_col = "response_col",
group_col = "group_col")},
error = function(e){
list(p.value = NA, R2_welch = NA)
})
c(res$p.value, res$R2_welch)
})
library(org.Mm.eg.db)
library(clusterProfiler)
tmp <- gene_mat[,2]
tmp <- tmp[order(tmp, decreasing = TRUE)]
set.seed(10)
gse <- clusterProfiler::gseGO(
tmp,
ont = "MF", # what kind of pathways are you interested in
keyType = "SYMBOL",
OrgDb = "org.Hs.eg.db",
pvalueCutoff = 0.05,       # p-value threshold for pathways
minGSSize = 10,            # minimum gene set size
maxGSSize = 500,            # maximum gene set size
scoreType = "pos"
)
head(gene_mat)
dim(gene_mat)
gene_mat <- t(gene_mat)
rownames(gene_mat) <- rownames(dat)
colnames(gene_mat) <- c("p.value", "R2_welch")
library(org.Mm.eg.db)
library(clusterProfiler)
tmp <- gene_mat[,2]
tmp <- tmp[order(tmp, decreasing = TRUE)]
head(tmp)
set.seed(10)
gse <- clusterProfiler::gseGO(
tmp,
ont = "MF", # what kind of pathways are you interested in
keyType = "SYMBOL",
OrgDb = "org.Hs.eg.db",
pvalueCutoff = 0.05,       # p-value threshold for pathways
minGSSize = 10,            # minimum gene set size
maxGSSize = 500,            # maximum gene set size
scoreType = "pos"
)
head(tmp)
set.seed(10)
gse <- clusterProfiler::gseGO(
tmp,
ont = "MF", # what kind of pathways are you interested in
keyType = "SYMBOL",
OrgDb = "org.Hs.eg.db",
pvalueCutoff = 0.05,       # p-value threshold for pathways
minGSSize = 10,            # minimum gene set size
maxGSSize = 500,            # maximum gene set size
scoreType = "pos"
)
tmp <- gene_mat[,2]
tmp <- tmp[order(tmp, decreasing = TRUE)]
plot(tmp)
set.seed(10)
gse <- clusterProfiler::gseGO(
tmp,
ont = "MF", # what kind of pathways are you interested in
keyType = "SYMBOL",
OrgDb = "org.Hs.eg.db",
pvalueCutoff = 0.05,       # p-value threshold for pathways
minGSSize = 10,            # minimum gene set size
maxGSSize = 500,            # maximum gene set size
scoreType = "pos"
)
x= tmp
sort(x, decreasing = TRUE) == x
zz = all(sort(x, decreasing = TRUE) == x )
length(sort(x, decreasing = TRUE))
length(x)
tail(x)
table(head(seurat_obj$in_lcl_cluster))
seurat_obj <- subset(seurat_obj, in_lcl_cluster == TRUE)
seurat_obj
gene_mat <- sapply(1:nrow(dat), function(i){
if(i %% floor(nrow(dat)/10) == 0) cat('*')
x <- as.numeric(dat[i,])
y <- droplevels(seurat_obj$fine_cluster)
df <- data.frame(response_col = x,
group_col = y)
df <- remove_zero_variance(data = df,
response_col = "response_col",
group_col = "group_col")
res <- tryCatch({welch_anova(data = df,
response_col = "response_col",
group_col = "group_col")},
error = function(e){
list(p.value = NA, R2_welch = NA)
})
c(res$p.value, res$R2_welch)
})
dat <- SeuratObject::LayerData(
seurat_obj,
layer = "data",
assay = "RNA"
)
gene_mat <- sapply(1:nrow(dat), function(i){
if(i %% floor(nrow(dat)/10) == 0) cat('*')
x <- as.numeric(dat[i,])
y <- droplevels(seurat_obj$fine_cluster)
df <- data.frame(response_col = x,
group_col = y)
df <- remove_zero_variance(data = df,
response_col = "response_col",
group_col = "group_col")
res <- tryCatch({welch_anova(data = df,
response_col = "response_col",
group_col = "group_col")},
error = function(e){
list(p.value = NA, R2_welch = NA)
})
c(res$p.value, res$R2_welch)
})
tmp <- gene_mat[,2]
tmp <- tmp[order(tmp, decreasing = TRUE)]
all(!is.na(tmp))
set.seed(10)
gse <- clusterProfiler::gseGO(
tmp,
ont = "MF", # what kind of pathways are you interested in
keyType = "SYMBOL",
OrgDb = "org.Hs.eg.db",
pvalueCutoff = 0.05,       # p-value threshold for pathways
minGSSize = 10,            # minimum gene set size
maxGSSize = 500,            # maximum gene set size
scoreType = "pos"
)
gene_mat <- t(gene_mat)
head(gene_mat)
i=1
x <- as.numeric(dat[i,])
y <- droplevels(seurat_obj$fine_cluster)
df <- data.frame(response_col = x,
group_col = y)
head(df)
quantile(df$response_col)
df <- remove_zero_variance(data = df,
response_col = "response_col",
group_col = "group_col")
head(df)
quantile(df$response_col)
res <- tryCatch({welch_anova(data = df,
response_col = "response_col",
group_col = "group_col")},
error = function(e){
list(p.value = NA, R2_welch = NA)
})
res
rm(list=ls())
library(Seurat)
library(ggplot2)
library(ggrepel)
library(dbscan)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
source("kevin/Writeup7_dylan/welch_anova.R")
load(paste0(out_folder, "adata_with_lcl.RData"))
seurat_obj$OG_condition <- factor(seurat_obj$OG_condition)
seurat_obj$Lineage <- factor(seurat_obj$Lineage)
color_vec <- c("cis" = rgb(202,111,55, maxColorValue = 255),
"cistocis" = rgb(248,210,152, maxColorValue = 255),
"cistococl2" = rgb(240,148,71, maxColorValue = 255),
"cistodabtram" = rgb(160,61,38, maxColorValue = 255),
"cocl2" = rgb(69,132,69, maxColorValue = 255),
"cocl2tocis" = rgb(131,202,163, maxColorValue = 255),
"cocl2tococl2" = rgb(126,191,90, maxColorValue = 255),
"cocl2todabtram" = rgb(35,63,58, maxColorValue = 255),
"dabtram" = rgb(68,49,147, maxColorValue = 255),
"dabtramtocis" = rgb(147,137,193, maxColorValue = 255),
"dabtramtococl2" = rgb(145,54,147, maxColorValue = 255),
"dabtramtodabtram" = rgb(68,32,85, maxColorValue = 255))
embedding <- seurat_obj[["lcl"]]@cell.embeddings
apply(embedding, 2, quantile)
set.seed(10)
seurat_obj <- Seurat::FindNeighbors(seurat_obj,
reduction = "lcl",
dims = 1:64)
seurat_obj <- Seurat::FindClusters(seurat_obj,
resolution = 0.01)
tab_mat <- table(droplevels(seurat_obj$Lineage),
droplevels(seurat_obj$RNA_snn_res.0.01))
cluster_sizes <- colSums(tab_mat)
# keep only the cells in clusters with more than 200 cells
cluster_names <- colnames(tab_mat)[which(cluster_sizes > 200)]
keep_vec <- (seurat_obj$RNA_snn_res.0.01 %in% cluster_names)
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
plot1 <- Seurat::DimPlot(seurat_obj,
group.by = "RNA_snn_res.0.01",
reduction = "lcl.umap")
embedding <- seurat_obj[["lcl"]]@cell.embeddings
dbscan_res <- dbscan::dbscan(
x = embedding,
eps = 2,
minPts = 50
)
dbscan_cluster <- dbscan_res$cluster
dbscan_cluster[dbscan_cluster == 0] <- NA
names(dbscan_cluster) <- Seurat::Cells(seurat_obj)
seurat_obj$dbscan <- dbscan_cluster
plot1 <- Seurat::DimPlot(seurat_obj,
group.by = "dbscan",
reduction = "lcl.umap")
seurat_obj$keep <- !is.na(seurat_obj$dbscan)
seurat_obj <- subset(seurat_obj, keep == TRUE)
seurat_obj <- Seurat::FindClusters(seurat_obj,
resolution = 0.01)
tab_vec <- table(seurat_obj$RNA_snn_res.0.01)
cluster_names <- names(tab_vec)[which(tab_vec > 200)]
keep_vec <- (seurat_obj$RNA_snn_res.0.01 %in% cluster_names)
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
plot1 <- Seurat::DimPlot(seurat_obj,
group.by = "RNA_snn_res.0.01",
reduction = "lcl.umap")
seurat_obj$Lineage <- factor(paste0("Lineage:", seurat_obj$Lineage))
seurat_obj$Lineage <- droplevels(seurat_obj$Lineage)
seurat_obj$RNA_snn_res.0.01 <- factor(paste0("Cluster:", seurat_obj$RNA_snn_res.0.01))
dat <- SeuratObject::LayerData(
seurat_obj,
layer = "data",
assay = "RNA"
)
gene_mat <- sapply(1:nrow(dat), function(i){
if(i %% floor(nrow(dat)/10) == 0) cat('*')
x <- as.numeric(dat[i,])
y <- droplevels(seurat_obj$RNA_snn_res.0.01)
df <- data.frame(response_col = x,
group_col = y)
df <- remove_zero_variance(data = df,
response_col = "response_col",
group_col = "group_col")
res <- tryCatch({welch_anova(data = df,
response_col = "response_col",
group_col = "group_col")},
error = function(e){
list(p.value = NA, R2_welch = NA)
})
c(res$p.value, res$R2_welch)
})
gene_mat <- t(gene_mat)
rownames(gene_mat) <- rownames(dat)
colnames(gene_mat) <- c("p.value", "R2_welch")
rm_idx <- unique(c(which(is.na(gene_mat[,1])), which(is.na(gene_mat[,2]))))
if(length(rm_idx) > 0){
gene_mat <- gene_mat[-rm_idx,]
}
head(gene_mat)
library(org.Mm.eg.db)
library(clusterProfiler)
tmp <- gene_mat[,2]
tmp <- tmp[order(tmp, decreasing = TRUE)]
set.seed(10)
gse <- clusterProfiler::gseGO(
tmp,
ont = "MF", # what kind of pathways are you interested in
keyType = "SYMBOL",
OrgDb = "org.Hs.eg.db",
pvalueCutoff = 0.05,       # p-value threshold for pathways
minGSSize = 10,            # minimum gene set size
maxGSSize = 500,            # maximum gene set size
scoreType = "pos"
)
gse_df <- as.data.frame(gse)
gse_df[ c("Description","p.adjust")]
plot1 <-dotplot(gse, showCategory=30) + ggtitle("dotplot for GSEA")
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova-supercluster_gsea.png"),
height = 8, width = 4)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova-supercluster_gsea.png"),
height = 8, width = 6)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova-supercluster_gsea.png"),
height = 7, width = 5)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova-supercluster_gsea.png"),
height = 7, width = 6)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova_Actin_by-umap.png"),
height = 4, width = 8)
seurat_obj$Actin2 <- pmax(seurat_obj$Actin1, 0)
seurat_obj <- Seurat::AddModuleScore(
seurat_obj,
features = list(actin_genes),
ctrl = 50,
name = "Actin"
)
actin_genes <- gse_df["GO:0051015", "core_enrichment"]
actin_genes <- strsplit(actin_genes, split = "/")[[1]]
seurat_obj <- Seurat::AddModuleScore(
seurat_obj,
features = list(actin_genes),
ctrl = 50,
name = "Actin"
)
seurat_obj$Actin2 <- pmax(seurat_obj$Actin1, 0)
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "Actin2",
reduction = "lcl.umap")
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova_Actin_by-lcl.png"),
height = 5, width = 8)
plot1 <- scCustomize::FeaturePlot_scCustom(seurat_obj,
features = "Actin2",
reduction = "umap")
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova_Actin_by-umap.png"),
height = 5, width = 8)
plot1 <-dotplot(gse, showCategory=30) + ggtitle("dotplot for GSEA")
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova-supercluster_gsea.png"),
height = 6, width = 5)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_anova-supercluster_gsea.png"),
height = 5, width = 5)
rm(list=ls())
library(Seurat)
library(ggplot2)
library(ggrepel)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
# Plot just: dabtramtocis and cistodabtram
kk <- 1
embedding <- embedding_list[[kk]]
embedding_name <- names(embedding_list)[kk]
Seurat::Idents(seurat_obj) <- "OG_condition"
embedding_list <- list(
umap = seurat_obj[["umap"]]@cell.embeddings,
lcl = seurat_obj[["lcl.umap"]]@cell.embeddings
)
# Plot just: dabtramtocis and cistodabtram
kk <- 1
embedding <- embedding_list[[kk]]
embedding_name <- names(embedding_list)[kk]
conditions <- c("dabtramtocis", "cistodabtram")
order_vec <- levels(seurat_obj$OG_condition)
order_vec <- c(setdiff(order_vec, conditions), conditions)
color_vec <- seurat_obj@misc[["OG_condition_colors"]]
color_vec[!names(color_vec) %in% conditions] <- "gray"
df <- cbind(data.frame(embedding),
seurat_obj$OG_condition)
colnames(df) <- c("x", "y", "OG_condition")
# shuffle indicies
cell_idx <- unlist(lapply(order_vec, function(grouping){
which(seurat_obj$OG_condition == grouping)
}))
df <- df[cell_idx,]
# shuffle the conditions
cell_idx <- which(df$OG_condition %in% conditions)
df[cell_idx,] <- df[sample(cell_idx),]
# shuffle the conditions
cell_idx <- which(df$OG_condition %in% conditions)
df[cell_idx,] <- df[sample(cell_idx),]
plot1 <- ggplot2::ggplot(data = df, ggplot2::aes(x = x, y = y, ))
plot1 <- plot1 + ggplot2::geom_point(ggplot2::aes(
color = OG_condition,
size  = ifelse(OG_condition %in% conditions, 2, 1)
))
plot1 <- plot1 + ggplot2::scale_colour_manual(values = color_vec)
plot1 <- plot1 + ggplot2::scale_size_identity()
plot1 <- plot1 + cowplot::theme_cowplot()
plot1 <- plot1 + ggplot2::labs(x = "", y = "")
plot1 <- plot1 + Seurat::NoLegend()
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl_embedding-", embedding_name, "_dabtram-cis.png"),
height = 5, width = 5)
diff(1/(1:8))

library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
tab_mat2 <- tab_mat
# normalize
for(i in 1:nrow(tab_mat2)){
tab_mat2[i,] <- tab_mat2[i,]/sum(tab_mat2[i,])
}
n <- nrow(tab_mat2)
cor_mat <- matrix(NA, n, n)
for(i in 1:(n-1)){
if(i %% floor(n/10) == 0) cat('*')
idx1 <- which(tab_mat2[i,] == 0)
for(j in (i+1):n){
idx2 <- which(tab_mat2[j,] == 0)
if(length(idx1) == length(idx2) & all(idx1 %in% idx2) & length(idx1) > 1){
tmp <- stats::cor(tab_mat2[i,], tab_mat2[j,])
cor_mat[i,j] <- tmp
cor_mat[j,i] <- tmp
}
}
}
table(!is.na(cor_mat))
quantile(cor_mat[!is.na(cor_mat)])
idx <- which(cor_mat == 1, arr.ind = TRUE)
head(idx)
vec <- c(8,39,269,322,464)
cor_mat[vec, vec]
tab_mat[vec,]
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
tab_mat2 <- tab_mat
# normalize
for(i in 1:nrow(tab_mat2)){
tab_mat2[i,] <- tab_mat2[i,]/sum(tab_mat2[i,])
}
n <- nrow(tab_mat2)
cor_mat <- matrix(NA, n, n)
for(i in 1:(n-1)){
if(i %% floor(n/10) == 0) cat('*')
idx1 <- which(tab_mat2[i,] != 0)
for(j in (i+1):n){
idx2 <- which(tab_mat2[j,] != 0)
if(length(idx1) == length(idx2) & all(idx1 %in% idx2) & length(idx1) > 1){
tmp <- stats::cor(tab_mat2[i,], tab_mat2[j,])
cor_mat[i,j] <- tmp
cor_mat[j,i] <- tmp
}
}
}
table(!is.na(cor_mat))
quantile(cor_mat[!is.na(cor_mat)])
idx <- which(cor_mat == 1, arr.ind = TRUE)
head(idx)
idx <- which(cor_mat >= 0.9, arr.ind = TRUE)
head(idx)
idx <- which(cor_mat == 1, arr.ind = TRUE)
idx
vec <- c(28,305,487,550)
cor_mat[vec, vec]
tab_mat[vec,]
tab_mat2[vec,]
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
idx
rm(list=ls())
library(Seurat)
library(dplyr)
library(tidyr)
library(ggplot2)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
seurat_obj$Lineage <- factor(paste0("Lineage:", seurat_obj$Lineage))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$OG_condition)
rowsum_vec <- rowSums(tab_mat)
tab_mat2 <- tab_mat
# normalize
for(i in 1:nrow(tab_mat2)){
tab_mat2[i,] <- tab_mat2[i,]/sum(tab_mat2[i,])
}
n <- nrow(tab_mat2)
cor_mat <- matrix(NA, n, n)
for(i in 1:(n-1)){
if(i %% floor(n/10) == 0) cat('*')
idx1 <- which(tab_mat2[i,] != 0)
for(j in (i+1):n){
idx2 <- which(tab_mat2[j,] != 0)
if(length(idx1) == length(idx2) & all(idx1 %in% idx2) & length(idx1) > 1){
tmp <- stats::cor(tab_mat2[i,], tab_mat2[j,])
cor_mat[i,j] <- tmp
cor_mat[j,i] <- tmp
}
}
}
table(!is.na(cor_mat))
quantile(cor_mat[!is.na(cor_mat)])
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
colnames(cor_mat) <- rownames(tab_mat)
rownames(cor_mat) <- rownames(tab_mat)
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
unique_lineage_idx <- unique(as.numeric(idx))
unique_lineage_idx
idx <- which(cor_mat > 0.9, arr.ind = TRUE)
unique_lineage_idx <- unique(as.numeric(idx))
quantile(rowsum_vec[unique_lineage_idx])
largest_lineage_idx <- unique_lineage_idx[which.max(rowsum_vec[unique_lineage_idx])]
largest_lineage_idx
rowsum_vec[323]
# zoom in on this lineage
parter_lineage_idx <- which(cor_mat[largest_lineage_idx,] >= 0.9)
parter_lineage_idx
rowsum_vec[largest_lineage_idx]
rowsum_vec[parter_lineage_idx]
vec <- c(largest_lineage_idx,parter_lineage_idx]
vec <- c(largest_lineage_idx,parter_lineage_idx]
rowsum_vec[largest_lineage_idx]
# zoom in on this lineage
parter_lineage_idx <- which(cor_mat[largest_lineage_idx,] >= 0.9)
rowsum_vec[parter_lineage_idx]
vec <- c(largest_lineage_idx,parter_lineage_idx)
cor_mat[vec, vec]
tab_mat[vec,]
tab_mat2[vec,]
tab_mat[vec,]
lineage_names <- rownames(cor_mat)[lineage_idx]
lineage_idx <- c(largest_lineage_idx, parter_lineage_idx)
cor_mat[lineage_idx, lineage_idx]
tab_mat[lineage_idx,]
tab_mat2[lineage_idx,]
lineage_names <- rownames(cor_mat)[lineage_idx]
lineage_names
set.seed(10)
seurat_obj <- Seurat::FindNeighbors(seurat_obj,
reduction = "lcl",
dims = 1:64)
seurat_obj <- Seurat::FindClusters(seurat_obj,
resolution = 0.1)
seurat_obj$RNA_snn_res.0.1 <- factor(paste0("Cluster:", seurat_obj$RNA_snn_res.0.1))
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
cell_idx
tab_vec <- table(seurat_obj$RNA_snn_res.0.1[cell_idx])
tab_vec
table(table(tab_vec))
tab_vec[tab_vec != 0]
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_vec <- table(
seurat_obj$Lineage[cell_idx],
seurat_obj$RNA_snn_res.0.1[cell_idx]
)
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
seurat_obj$Lineage[cell_idx],
seurat_obj$RNA_snn_res.0.1[cell_idx]
)
tab_mat_special
tab_mat_special <- tab_mat_special[,colSums(tab_mat_special) != 0]
tab_mat_special
tab_mat_special
colSums(tab_mat_special)
tab_mat_special
tab_mat_special[1,]
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
seurat_obj$Lineage[cell_idx],
seurat_obj$RNA_snn_res.0.1[cell_idx]
)
tab_mat_special[1,]
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
seurat_obj$Lineage[cell_idx],
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
dim(tab_mat_special)
tab_mat_special
tab_mat_special[1,]
tab_mat_special[1:5,1:5]
zz = which(seurat_obj$Lineage=="Lineage:0")
zz
seurat_obj$RNA_snn_res.0.1[zz]
lineage_names
# find all the cells that are in the lineage_names
cell_idx <- which(seurat_obj$Lineage %in% lineage_names)
tab_mat_special <- table(
droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
tab_mat_special <- table(
droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
tab_mat_special
# how many lienages are in each island?
cluster_names <- levels(seurat_obj$RNA_snn_res.0.1)
num_lineages_per_cluster <- sapply(cluster_names, function(cluster){
tmp_idx <- which(seurat_obj$RNA_snn_res.0.1 == cluster)
length(unique(seurat_obj$Lineage[tmp_idx]))
})
names(num_lineages_per_cluster) <- cluster_names
num_lineages_per_cluster[unique(seurat_obj$RNA_snn_res.0.1[cell_idx])]
tab_mat_special <- table(
droplevels(seurat_obj$Lineage[cell_idx]),
droplevels(seurat_obj$RNA_snn_res.0.1[cell_idx])
)
tab_mat_special
hist(num_lineages_per_cluster)
rm(list=ls())
library(Seurat)
library(ggplot2)
library(ggrepel)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
set.seed(10)
seurat_obj <- Seurat::FindNeighbors(seurat_obj,
reduction = "lcl",
dims = 1:64)
seurat_obj <- Seurat::FindClusters(seurat_obj,
resolution = 0.1)
seurat_obj$Lineage <- factor(paste0("Lineage:", seurat_obj$Lineage))
seurat_obj$RNA_snn_res.0.1 <- factor(paste0("Cluster:", seurat_obj$RNA_snn_res.0.1))
seurat_obj <- Seurat::RunUMAP(seurat_obj,
reduction = 'lcl',
dims = 1:64,
assay = 'RNA',
reduction.name = 'lcl.umap',
reduction.key = 'lclUMAP_')
color_vec <- c("cis" = rgb(202,111,55, maxColorValue = 255),
"cistocis" = rgb(248,210,152, maxColorValue = 255),
"cistococl2" = rgb(240,148,71, maxColorValue = 255),
"cistodabtram" = rgb(160,61,38, maxColorValue = 255),
"cocl2" = rgb(69,132,69, maxColorValue = 255),
"cocl2tocis" = rgb(131,202,163, maxColorValue = 255),
"cocl2tococl2" = rgb(126,191,90, maxColorValue = 255),
"cocl2todabtram" = rgb(35,63,58, maxColorValue = 255),
"dabtram" = rgb(68,49,147, maxColorValue = 255),
"dabtramtocis" = rgb(147,137,193, maxColorValue = 255),
"dabtramtococl2" = rgb(145,54,147, maxColorValue = 255),
"dabtramtodabtram" = rgb(68,32,85, maxColorValue = 255))
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_OG_condition.png"),
height = 5, width = 5)
plot1 <- scCustomize::DimPlot_scCustom(seurat_obj,
reduction = "lcl.umap",
group.by = "OG_condition",
colors_use = color_vec)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_OG_condition.png"),
height = 5, width = 5)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_OG_condition.png"),
height = 5, width = 8)
plot1 <- scCustomize::DimPlot_scCustom(seurat_obj,
reduction = "lcl.umap",
group.by = "RNA_snn_res.0.1")
plot1 <- plot1 + Seurat::NoLegend()
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_RNA_snn_res.0.1.png"),
height = 5, width = 8)
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lcl-umap_RNA_snn_res.0.1.png"),
height = 5, width = 5)
tab_mat <- table(seurat_obj$Lineage, seurat_obj$RNA_snn_res.0.1)
rowsum_vec <- rowSums(tab_mat)
tab_mat <- tab_mat[order(rowsum_vec, decreasing = TRUE),]
colsum_vec <- colSums(tab_mat)
tab_mat <- tab_mat[,order(colsum_vec, decreasing = TRUE)]
rowsum_vec <- rowSums(tab_mat)
colsum_vec <- colSums(tab_mat)
num_lineages_per_cluster <- apply(tab_mat, 2, function(x){length(which(x!=0))})
df <- data.frame(
cluster = colnames(tab_mat),
num_cells = colsum_vec,
num_lineages = num_lineages_per_cluster
)
threshold_cells <- 400
threshold_lineage <- 10
# Example scatter plot
plot1 <- ggplot(df, aes(x = num_lineages, y = num_cells,label = cluster)) +
geom_point(size = 3, alpha = 0.7) +  # Scatter points
geom_text_repel(data = df[df$num_cells > threshold_cells | df$num_lineages > threshold_lineage, ], # Adjust threshold
aes(label = cluster, color = "red"),
box.padding = 0.5,
point.padding = 0.3) +  # Prevent label overlapping
labs(x = "Number of Lineages", y = "Number of Cells", title = "Cluster Scatter Plot") +
Seurat::NoLegend()
plot1
ggplot2::ggsave(plot1,
filename = paste0(plot_folder, "Writeup7_lineage-by-cells_per-lcl-cluster.png"),
height = 5, width = 5)
rm(list=ls())
library(Seurat)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
seurat_obj <- NormalizeData(seurat_obj)
zz <- SeuratObject::LayerData(seurat_obj,
assay = "RNA",
layer = "data")
quantile(zz["FTL",])
idx1 <- which(seurat_obj$OG_condition == "cis")
idx2 <- which(seurat_obj$OG_condition == "cistocis")
j=1
vec1 <- as.numeric(zz[j,idx1])
vec2 <- as.numeric(zz[j,idx2])
logfc <- mean(vec1) - mean(vec2)
logfc
pvalue <- stats::wilcox.test(x = vec1, y = vec2)$p.value
gene_mat <- sapply(1:nrow(zz), function(j){
if(j %% floor(nrow(zz) == 0)) cat('*')
vec1 <- as.numeric(zz[j,idx1])
vec2 <- as.numeric(zz[j,idx2])
logfc <- mean(vec1) - mean(vec2)
pvalue <- stats::wilcox.test(x = vec1, y = vec2)$p.value
})
gene_mat <- sapply(1:nrow(zz), function(j){
if(j %% floor(nrow(zz)/10) == 0) cat('*')
vec1 <- as.numeric(zz[j,idx1])
vec2 <- as.numeric(zz[j,idx2])
logfc <- mean(vec1) - mean(vec2)
pvalue <- stats::wilcox.test(x = vec1, y = vec2)$p.value
})
gene_mat <- sapply(1:nrow(zz), function(j){
if(j %% floor(nrow(zz)/10) == 0) cat('*')
vec1 <- as.numeric(zz[j,idx1])
vec2 <- as.numeric(zz[j,idx2])
logfc <- mean(vec1) - mean(vec2)
pvalue <- stats::wilcox.test(x = vec1, y = vec2)$p.value
c(logfc = logfc, pvalue = pvalue)
})
gene_mat <- data.frame(t(gene_mat))
rownames(gene_mat) <- rownames(zz)
plot1 <- EnhancedVolcano::EnhancedVolcano(gene_mat,
lab = rownames(gene_mat),
x = 'logfc',
y = 'pvalue')
ggplot2::ggsave(plot1,
file = paste0(plot_folder, "Writeup7_de_cis-vs-cistocis.png"),
height = 8, width = 8)
x_lim <- quantile(abs(gene_mat$logfc), probs = 0.9)
?EnhancedVolcano::EnhancedVolcano
x_lim <- quantile(abs(gene_mat$logfc), probs = 0.9)
plot1 <- EnhancedVolcano::EnhancedVolcano(gene_mat,
lab = rownames(gene_mat),
x = 'logfc',
y = 'pvalue',
FCcutoff = x_lim)
ggplot2::ggsave(plot1,
file = paste0(plot_folder, "Writeup7_de_cis-vs-cistocis.png"),
height = 8, width = 8)
VlnPlot(seurat_obj, features = "FTL", layer = "data")
install_github("UPSUTER/GEMLI", subdir="GEMLI_package_v0")
library(devtools)
install_github("UPSUTER/GEMLI", subdir="GEMLI_package_v0")
rm(list=ls())
library(Seurat)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
seurat_obj <- NormalizeData(seurat_obj)
library(GEMLI)
# first filter to the top 50 lineages
lineage_tab <- table(seurat_obj$Lineage)
largest_lineages <- names(lineage_tab)[order(lineage_tab, decreasing = TRUE)[1:50]]
keep_vec <- rep(FALSE, length(Seurat::Cells(seurat_obj)))
keep_vec[seurat_obj$Lineage %in% largest_lineages] <- TRUE
table(keep_vec)
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
# remove any cells that are empty
data_matrix <- SeuratObject::LayerData(seurat_obj,
layer = "data",
assay = "RNA")
sum_vec <- Matrix::colSums(data_matrix)
if(any(sum_vec == 0)){
keep_vec <- rep(TRUE, length(Seurat::Cells(seurat_obj)))
keep_vec[sum_vec == 0] <- FALSE
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
}
seurat_obj
# run GEMLI
data_matrix <- SeuratObject::LayerData(seurat_obj,
layer = "data",
assay = "RNA")
data_matrix <- as.matrix(data_matrix)
rowsum_vec <- Matrix::rowSums(data_matrix)
data_matrix <- data_matrix[rowsum_vec != 0,]
GEMLI_items <- list()
GEMLI_items[['gene_expression']] <- data_matrix
GEMLI_items[['barcodes']] <- seurat_obj$Lineage
set.seed(10)
GEMLI_items <- predict_lineages_custom(GEMLI_items,
desired_cluster_size = c(50,200),
verbose = 1)
set.seed(10)
GEMLI_items <- GEMLI::predict_lineages_custom(GEMLI_items,
desired_cluster_size = c(50,200),
verbose = 1)
source("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/kevin/Writeup5_GEMLI/predict_lineages_custom.R")
set.seed(10)
GEMLI_items <- predict_lineages_custom(GEMLI_items,
desired_cluster_size = c(50,200),
verbose = 1)
source("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/kevin/Writeup5_GEMLI/quantify_clusters_iterative_custom.R")
source("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/kevin/Writeup5_GEMLI/predict_lineages_custom.R")
set.seed(10)
GEMLI_items <- predict_lineages_custom(GEMLI_items,
desired_cluster_size = c(50,200),
verbose = 1)
seurat_obj
rm(list=ls())
library(Seurat)
library(GEMLI)
source("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/kevin/Writeup5_GEMLI/quantify_clusters_iterative_custom.R")
source("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/kevin/Writeup5_GEMLI/predict_lineages_custom.R")
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
seurat_obj <- NormalizeData(seurat_obj)
# first filter to the top 50 lineages
lineage_tab <- table(seurat_obj$Lineage)
largest_lineages <- names(lineage_tab)[order(lineage_tab, decreasing = TRUE)[1:50]]
keep_vec <- rep(FALSE, length(Seurat::Cells(seurat_obj)))
keep_vec[seurat_obj$Lineage %in% largest_lineages] <- TRUE
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
# remove any cells that are empty
data_matrix <- SeuratObject::LayerData(seurat_obj,
layer = "data",
assay = "RNA")
sum_vec <- Matrix::colSums(data_matrix)
if(any(sum_vec == 0)){
keep_vec <- rep(TRUE, length(Seurat::Cells(seurat_obj)))
keep_vec[sum_vec == 0] <- FALSE
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
}
# run GEMLI
data_matrix <- t(seurat_obj[["pca"]]@cell.embeddings)
GEMLI_items <- list()
GEMLI_items[['gene_expression']] <- data_matrix
GEMLI_items[['barcodes']] <- seurat_obj$Lineage
set.seed(10)
GEMLI_items <- predict_lineages_custom(GEMLI_items,
bool_find_markers = FALSE,
desired_cluster_size = c(50,200),
verbose = 1)
rm(list=ls())
library(Seurat)
library(GEMLI)
source("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/kevin/Writeup5_GEMLI/quantify_clusters_iterative_custom.R")
source("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/kevin/Writeup5_GEMLI/predict_lineages_custom.R")
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
plot_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/git/SCSeq_LineageBarcoding/fig/kevin/Writeup7/"
load(paste0(out_folder, "adata_with_lcl.RData"))
seurat_obj <- NormalizeData(seurat_obj)
# first filter to the top 50 lineages
lineage_tab <- table(seurat_obj$Lineage)
largest_lineages <- names(lineage_tab)[order(lineage_tab, decreasing = TRUE)[1:50]]
keep_vec <- rep(FALSE, length(Seurat::Cells(seurat_obj)))
keep_vec[seurat_obj$Lineage %in% largest_lineages] <- TRUE
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
# remove any cells that are empty
data_matrix <- SeuratObject::LayerData(seurat_obj,
layer = "data",
assay = "RNA")
sum_vec <- Matrix::colSums(data_matrix)
if(any(sum_vec == 0)){
keep_vec <- rep(TRUE, length(Seurat::Cells(seurat_obj)))
keep_vec[sum_vec == 0] <- FALSE
seurat_obj$keep <- keep_vec
seurat_obj <- subset(seurat_obj, keep == TRUE)
}
# run GEMLI
data_matrix <- t(seurat_obj[["pca"]]@cell.embeddings)
GEMLI_items <- list()
GEMLI_items[['gene_expression']] <- data_matrix
GEMLI_items[['barcodes']] <- seurat_obj$Lineage
set.seed(10)
GEMLI_items <- predict_lineages_custom(GEMLI_items,
bool_find_markers = FALSE,
desired_cluster_size = c(50,200),
verbose = 1)

df <- data.frame(
cluster = colnames(tab_mat),
num_cells = colsum_vec,
num_lineages = num_lineages_per_cluster
)
threshold_cells <- 400
threshold_lineage <- 10
# Example scatter plot
plot1 <- ggplot(df, aes(x = num_lineages, y = num_cells,label = cluster)) +
geom_point(size = 3, alpha = 0.7) +  # Scatter points
geom_text_repel(data = df[df$num_cells > threshold_cells | df$num_lineages > threshold_lineage, ], # Adjust threshold
aes(label = cluster),
size = 5,
box.padding = 0.5,
point.padding = 0.3,
max.overlaps = Inf) +  # Prevent label overlapping
labs(x = "Number of Lineages", y = "Number of Cells", title = "Cluster Scatter Plot")
plot1
# Example scatter plot
plot1 <- ggplot(df, aes(x = num_lineages, y = num_cells,label = cluster)) +
geom_point(size = 3, alpha = 0.7) +  # Scatter points
geom_text_repel(data = df[df$num_cells > threshold_cells | df$num_lineages > threshold_lineage, ], # Adjust threshold
aes(label = cluster, color = "red"),
box.padding = 0.5,
point.padding = 0.3,
max.overlaps = Inf) +  # Prevent label overlapping
labs(x = "Number of Lineages", y = "Number of Cells", title = "Cluster Scatter Plot")
plot1
threshold_cells <- 400
threshold_lineage <- 10
# Example scatter plot
plot1 <- ggplot(df, aes(x = num_lineages, y = num_cells,label = cluster)) +
geom_point(size = 3, alpha = 0.7) +  # Scatter points
geom_text_repel(data = df[df$num_cells > threshold_cells | df$num_lineages > threshold_lineage, ], # Adjust threshold
aes(label = cluster, color = "red"),
box.padding = 0.5,
point.padding = 0.3) +  # Prevent label overlapping
labs(x = "Number of Lineages", y = "Number of Cells", title = "Cluster Scatter Plot") +
Seurat::NoLegend()
plot1
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
idx
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
lineage_names <- seurat_obj$Lineage[idx]
lineage_names
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
lineage_names <- unique(seurat_obj$Lineage[idx])
lineage_names
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = in_number/length(tmp_idx),
total_size = length(length(tmp_idx)))
})
head(percentage_mat)
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(length(tmp_idx)))
})
percentage_mat
percentage_mat <- t(percentage_mat)
percentage_mat
zz = seurat_obj$Lineage
table(table(zz))
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
percentage_mat <- percentage_mat[order(percentage_mat$total_size, decreasing = TRUE),]
head(percentage_mat)
order(percentage_mat$total_size, decreasing = TRUE)
percentage_mat <- percentage_mat[order(percentage_mat[,"total_size"], decreasing = TRUE),]
head(percentage_mat)
head(percentage_mat)
tail(percentage_mat)
plot(percentage_mat[,1],
log10(percentage_mat[,2]),
xlab = "In ratio",
ylab = "Total size of lineage")
plot(percentage_mat[,1],
log10(percentage_mat[,2]),
xlab = "In ratio",
ylab = "Total size of lineage",
pch = 16)
head(percentage_mat)
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
rownames(percentage_mat) <- lineage_names
percentage_mat <- percentage_mat[order(percentage_mat[,"total_size"], decreasing = TRUE),]
head(percentage_mat)
rm(list=ls())
library(Seurat)
library(ggplot2)
library(ggrepel)
out_folder <- "/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/"
load(paste0(out_folder, "adata_with_lcl.RData"))
set.seed(10)
seurat_obj <- Seurat::FindNeighbors(seurat_obj,
reduction = "lcl",
dims = 1:64)
seurat_obj <- Seurat::FindClusters(seurat_obj,
resolution = 0.1)
seurat_obj$Lineage <- factor(paste0("Lineage:", seurat_obj$Lineage))
seurat_obj$RNA_snn_res.0.1 <- factor(paste0("Cluster:", seurat_obj$RNA_snn_res.0.1))
seurat_obj <- Seurat::RunUMAP(seurat_obj,
reduction = 'lcl',
dims = 1:64,
assay = 'RNA',
reduction.name = 'lcl.umap',
reduction.key = 'lclUMAP_')
color_vec <- c("cis" = rgb(202,111,55, maxColorValue = 255),
"cistocis" = rgb(248,210,152, maxColorValue = 255),
"cistococl2" = rgb(240,148,71, maxColorValue = 255),
"cistodabtram" = rgb(160,61,38, maxColorValue = 255),
"cocl2" = rgb(69,132,69, maxColorValue = 255),
"cocl2tocis" = rgb(131,202,163, maxColorValue = 255),
"cocl2tococl2" = rgb(126,191,90, maxColorValue = 255),
"cocl2todabtram" = rgb(35,63,58, maxColorValue = 255),
"dabtram" = rgb(68,49,147, maxColorValue = 255),
"dabtramtocis" = rgb(147,137,193, maxColorValue = 255),
"dabtramtococl2" = rgb(145,54,147, maxColorValue = 255),
"dabtramtodabtram" = rgb(68,32,85, maxColorValue = 255))
tab_mat <- table(seurat_obj$Lineage, seurat_obj$RNA_snn_res.0.1)
rowsum_vec <- rowSums(tab_mat)
tab_mat <- tab_mat[order(rowsum_vec, decreasing = TRUE),]
colsum_vec <- colSums(tab_mat)
tab_mat <- tab_mat[,order(colsum_vec, decreasing = TRUE)]
rowsum_vec <- rowSums(tab_mat)
colsum_vec <- colSums(tab_mat)
num_lineages_per_cluster <- apply(tab_mat, 2, function(x){length(which(x!=0))})
df <- data.frame(
cluster = colnames(tab_mat),
num_cells = colsum_vec,
num_lineages = num_lineages_per_cluster
)
threshold_cells <- 400
threshold_lineage <- 10
# Example scatter plot
plot1 <- ggplot(df, aes(x = num_lineages, y = num_cells,label = cluster)) +
geom_point(size = 3, alpha = 0.7) +  # Scatter points
geom_text_repel(data = df[df$num_cells > threshold_cells | df$num_lineages > threshold_lineage, ], # Adjust threshold
aes(label = cluster, color = "red"),
box.padding = 0.5,
point.padding = 0.3) +  # Prevent label overlapping
labs(x = "Number of Lineages", y = "Number of Cells", title = "Cluster Scatter Plot") +
Seurat::NoLegend()
plot1
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:0")
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
rownames(percentage_mat) <- lineage_names
percentage_mat <- percentage_mat[order(percentage_mat[,"total_size"], decreasing = TRUE),]
head(percentage_mat)
tail(percentage_mat)
plot(percentage_mat[,1],
log10(percentage_mat[,2]),
xlab = "In ratio",
ylab = "Total size of lineage",
pch = 16)
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- which(rownames(percentage_mat)[percentage_mat[,"in_ratio"] > 0.8])
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- which(rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)])
which(percentage_mat[,"in_ratio"] > 0.8)
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
lineage_names
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
tmp_df <- seurat_obj@meta.data[,c("OG_condition", "Lineage")]
head(tmp_df)
tmp_df <- tmp_df[which(tmp_df$Lineage %in% lineage_names),]
head(tmp_df)
tab_mat <- table(tmp_df$Lineage, tmp_df$OG_condition)
tab_mat
tab_mat[1:50,]
tab_mat <- tab_mat[order(rowSums(tab_mat), decreasing = TRUE),]
tab_mat[1:10,]
colSums(tab_mat)
original_percentage <- table(seurat_obj$Lineage)
original_percentage
original_percentage <- table(seurat_obj$OG_condition)
colSums(tab_mat)/original_percentage
round(100*colSums(tab_mat)/original_percentage,2)
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:3")
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
rownames(percentage_mat) <- lineage_names
percentage_mat <- percentage_mat[order(percentage_mat[,"total_size"], decreasing = TRUE),]
head(percentage_mat)
tail(percentage_mat)
plot(percentage_mat[,1],
log10(percentage_mat[,2]),
xlab = "In ratio",
ylab = "Total size of lineage",
pch = 16)
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
tmp_df <- seurat_obj@meta.data[,c("OG_condition", "Lineage")]
tmp_df <- tmp_df[which(tmp_df$Lineage %in% lineage_names),]
tab_mat <- table(tmp_df$Lineage, tmp_df$OG_condition)
tab_mat <- tab_mat[order(rowSums(tab_mat), decreasing = TRUE),]
colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
round(100*colSums(tab_mat)/original_percentage,2)
# find all the cluster 0's
idx <- which(seurat_obj$RNA_snn_res.0.1 == "Cluster:11")
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == "Cluster:0")
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
rownames(percentage_mat) <- lineage_names
percentage_mat <- percentage_mat[order(percentage_mat[,"total_size"], decreasing = TRUE),]
head(percentage_mat)
tail(percentage_mat)
plot(percentage_mat[,1],
log10(percentage_mat[,2]),
xlab = "In ratio",
ylab = "Total size of lineage",
pch = 16)
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
tmp_df <- seurat_obj@meta.data[,c("OG_condition", "Lineage")]
tmp_df <- tmp_df[which(tmp_df$Lineage %in% lineage_names),]
tab_mat <- table(tmp_df$Lineage, tmp_df$OG_condition)
tab_mat <- tab_mat[order(rowSums(tab_mat), decreasing = TRUE),]
colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
round(100*colSums(tab_mat)/original_percentage,2)
# find all the cluster 0's
cluster_name <- "Cluster:3"
idx <- which(seurat_obj$RNA_snn_res.0.1 == cluster_name)
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == cluster_name)
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
rownames(percentage_mat) <- lineage_names
percentage_mat <- percentage_mat[order(percentage_mat[,"total_size"], decreasing = TRUE),]
head(percentage_mat)
tail(percentage_mat)
plot(percentage_mat[,1],
log10(percentage_mat[,2]),
xlab = "In ratio",
ylab = "Total size of lineage",
pch = 16)
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
tmp_df <- seurat_obj@meta.data[,c("OG_condition", "Lineage")]
tmp_df <- tmp_df[which(tmp_df$Lineage %in% lineage_names),]
tab_mat <- table(tmp_df$Lineage, tmp_df$OG_condition)
tab_mat <- tab_mat[order(rowSums(tab_mat), decreasing = TRUE),]
colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
round(100*colSums(tab_mat)/original_percentage,2)
colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
cluster_percentage <- rep(0, length(original_percentage))
names(cluster_percentage) <- names(original_percentage)
cluster_percentage[names(tmp)] <- tmp
tmp <- colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
cluster_percentage <- rep(0, length(original_percentage))
names(cluster_percentage) <- names(original_percentage)
cluster_percentage[names(tmp)] <- tmp
round(100*tmp/original_percentage,2)
tmp <- colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
cluster_percentage <- rep(0, length(original_percentage))
names(cluster_percentage) <- names(original_percentage)
cluster_percentage[names(tmp)] <- tmp
round(100*tmp/original_percentage,2)
names(tmp)
cluster_percentage
cluster_percentage <- rep(0, length(original_percentage))
names(cluster_percentage) <- names(original_percentage)
cluster_percentage
names(tmp)
cluster_percentage[names(tmp)]
tmp
cluster_percentage[names(tmp)] <- tmp
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
tmp_df <- seurat_obj@meta.data[,c("OG_condition", "Lineage")]
tmp_df <- tmp_df[which(tmp_df$Lineage %in% lineage_names),]
tab_mat <- table(tmp_df$Lineage, tmp_df$OG_condition)
tab_mat <- tab_mat[order(rowSums(tab_mat), decreasing = TRUE),]
tmp <- colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
cluster_percentage <- rep(0, length(original_percentage))
names(cluster_percentage) <- names(original_percentage)
cluster_percentage[names(tmp)] <- tmp
round(100*tmp/original_percentage,2)
cluster_percentage
tmp
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
tmp_df <- seurat_obj@meta.data[,c("OG_condition", "Lineage")]
tmp_df <- tmp_df[which(tmp_df$Lineage %in% lineage_names),]
tab_mat <- table(tmp_df$Lineage, tmp_df$OG_condition)
tab_mat <- tab_mat[order(rowSums(tab_mat), decreasing = TRUE),]
tmp <- colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
cluster_percentage <- rep(0, length(original_percentage))
names(cluster_percentage) <- names(original_percentage)
cluster_percentage[names(tmp)] <- tmp
round(100*cluster_percentage/original_percentage,2)
# find all the cluster 0's
cluster_name <- "Cluster:11"
idx <- which(seurat_obj$RNA_snn_res.0.1 == cluster_name)
lineage_names <- unique(seurat_obj$Lineage[idx])
percentage_mat <- sapply(lineage_names, function(lineage){
tmp_idx <- which(seurat_obj$Lineage == lineage)
in_number <- which(seurat_obj$RNA_snn_res.0.1[tmp_idx] == cluster_name)
c(in_ratio = length(in_number)/length(tmp_idx),
total_size = length(tmp_idx))
})
percentage_mat <- t(percentage_mat)
rownames(percentage_mat) <- lineage_names
percentage_mat <- percentage_mat[order(percentage_mat[,"total_size"], decreasing = TRUE),]
head(percentage_mat)
tail(percentage_mat)
plot(percentage_mat[,1],
log10(percentage_mat[,2]),
xlab = "In ratio",
ylab = "Total size of lineage",
pch = 16)
# now, for all the cells in the "pure" lineages, see what conditions they are in
lineage_names <- rownames(percentage_mat)[which(percentage_mat[,"in_ratio"] > 0.8)]
tmp_df <- seurat_obj@meta.data[,c("OG_condition", "Lineage")]
tmp_df <- tmp_df[which(tmp_df$Lineage %in% lineage_names),]
tab_mat <- table(tmp_df$Lineage, tmp_df$OG_condition)
tab_mat <- tab_mat[order(rowSums(tab_mat), decreasing = TRUE),]
tmp <- colSums(tab_mat)
original_percentage <- table(seurat_obj$OG_condition)
cluster_percentage <- rep(0, length(original_percentage))
names(cluster_percentage) <- names(original_percentage)
cluster_percentage[names(tmp)] <- tmp
round(100*cluster_percentage/original_percentage,2)
hotspot_csv <- read.csv("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/Writeup7_LCL_hotspot_autocorrelations.csv")
head(hotspot_csv)
min_pval <- min(hotspot_csv$Pval[otspot_csv$Pval > 0])
hotspot_csv <- read.csv("/Users/kevinlin/Library/CloudStorage/Dropbox/Collaboration-and-People/Joshua/out/kevin/Writeup7_joshua-results_dylan/Writeup7_LCL_hotspot_autocorrelations.csv")
min_pval <- min(hotspot_csv$Pval[hotspot_csv$Pval > 0])
min_pval
hotspot_csv$Pval <- pmax(hotspot_csv$Pval, min_pval)
hist(-log10(hotspot_csv$Pval))
head(hotspot_csv)
length(which(hotspot_csv$FDR <= 0.05))
dim(hotspot_csv)
quantile(hotspot_csv$C)
length(which(hotspot_csv$C>=0.2))
length(which(hotspot_csv$C>=0.1))
length(which(hotspot_csv$C>=0.2))
idx <- which(hotspot_csv$C >= 0.2)
hotspot_csv[idx,]
writeLines(hotspot_csv[idx, "Gene"], paste0(out_folder, "gene_list.txt"))
writeLines(hotspot_csv[idx, "Gene"], paste0(out_folder, "hotspot_gene_list.txt"))
hallmark_csv <- readxl::read_excel(paste0(out_folder, "41586_2023_6130_MOESM6_ESM.xlsx"),
sheet = "Cancer MPs")
hallmark_csv
hallmark_csv <- as.data.frame(hallmark_csv)
hallmark_csv
dim(hallmark_csv)
head(hotspot_csv)
hotspot_csv <- read.csv(paste0(out_folder, "Writeup7_LCL_hotspot_autocorrelations.csv"))
rownames(hotspot_csv) <- hotspot_csv$Gene
min_pval <- min(hotspot_csv$Pval[hotspot_csv$Pval > 0])
hotspot_csv$Pval <- pmax(hotspot_csv$Pval, min_pval)
hallmark_csv <- readxl::read_excel(paste0(out_folder, "41586_2023_6130_MOESM6_ESM.xlsx"),
sheet = "Cancer MPs")
hallmark_csv <- as.data.frame(hallmark_csv)
for(j in 1:ncol(hallmark_csv)){
vec <- hallmark_csv[,j]
vec <- intersect(vec, rownames(hotspot_csv))
hist(-log10(hotspot_csv$Pval),
main = paste0("Column ", j, " (", colnames(hallmark_csv)[j], ")"))
idx <- which(rownames(hotspot_csv) %in% vec)
rug(-log10(hotspot_csv$Pval[idx]),
col = 2,
lwd = 2)
}
hallmark_csv <- readxl::read_excel(paste0(out_folder, "41586_2023_6130_MOESM6_ESM.xlsx"),
sheet = "Cancer MPs")
hallmark_csv <- as.data.frame(hallmark_csv)
for(j in 1:ncol(hallmark_csv)){
vec <- hallmark_csv[,j]
vec <- intersect(vec, rownames(hotspot_csv))
hist(-log10(hotspot_csv$Pval),
main = paste0("Column ", j, " (", colnames(hallmark_csv)[j], "),",
"\n# genes: ", length(vec)))
idx <- which(rownames(hotspot_csv) %in% vec)
rug(-log10(hotspot_csv$Pval[idx]),
col = 2,
lwd = 2)
}
dim(hallmark_csv)
hallmark_csv[,5]
library(Seurat)
library(SeuratData)
library(cowplot)
library(dplyr)
bm <- LoadData(ds = "bmcite")
?sample
keep_cells <- sample(Seurat::Cells(bm),
size = round(length(Seurat::Cells(bm))/10),
replace = FALSE)
head(keep_cells)
bm <- subset(bm, cells = keep_cells)
bm
library(ggplot2)
rm(list=ls())
library(Seurat)
library(Signac)
library(EnsDb.Hsapiens.v86)
library(dplyr)
library(ggplot2)
# the 10x hdf5 file contains both data types.
inputdata.10x <- Read10X_h5("/Users/kevinlin/Downloads/pbmc_granulocyte_sorted_10k_raw_feature_bc_matrix.h5")
# extract RNA and ATAC data
rna_counts <- inputdata.10x$`Gene Expression`
atac_counts <- inputdata.10x$Peaks
# Create Seurat object
pbmc <- CreateSeuratObject(counts = rna_counts)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Now add in the ATAC-seq data
# we'll only use peaks in standard chromosomes
grange.counts <- StringToGRanges(rownames(atac_counts), sep = c(":", "-"))
grange.use <- seqnames(grange.counts) %in% standardChromosomes(grange.counts)
atac_counts <- atac_counts[as.vector(grange.use), ]
annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)
BiocManager::install("biovizBase")
annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)
seqlevelsStyle(annotations) <- 'UCSC'
genome(annotations) <- "hg38"
frag.file <- "../data/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz"
chrom_assay <- CreateChromatinAssay(
counts = atac_counts,
sep = c(":", "-"),
genome = 'hg38',
fragments = frag.file,
min.cells = 10,
annotation = annotations
)
frag.file <- "/Users/kevinlin/Downloads/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz"
chrom_assay <- CreateChromatinAssay(
counts = atac_counts,
sep = c(":", "-"),
genome = 'hg38',
fragments = frag.file,
min.cells = 10,
annotation = annotations
)
pbmc
keep_cells <- sample(Seurat::Cells(pbmc),
size = round(length(Seurat::Cells(pbmc))/10),
replace = FALSE)
pbmc <- subset(pbmc, cells = keep_cells)
pbmc
